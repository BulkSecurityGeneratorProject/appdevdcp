application {
  config {
    baseName dcpdesconformidades
    applicationType monolith
    authenticationType jwt
    buildTool maven
    cacheProvider ehcache
    clientFramework react
    clientPackageManager npm
    databaseType sql
    prodDatabaseType mysql
    jhiPrefix app
    languages [pt-br]
    nativeLanguage pt-br
    packageName br.com.lasa.dcpdesconformidades
    skipUserManagement false
    testFrameworks [protractor]
    useSass true
  }
  entities *
}

enum StatusAvaliacao {
	INICIADA,
    RELATORIO_FINALIZADO,
    ANEXO_AUDITORIA_FINALIZADO,
    ANEXO_SOLICITACAO_AJUSTE_FINALIZADO,
    SUBMETIDO
}

enum StatusItemAvaliado {
	OK, NAO_OK, N_A
}

enum TipoItemAvaliadoPerdaQuebra {
	PERDA, QUEBRA
}

enum CriticidadePainel {
    INADMISSIVEL,
    CONTROLE,
    VALOR_ELEVADO,
    CRITICO,
    ATENCAO
}

/**
 * TODO Incluir limite superior (perda e quebra) e inferior (perda e quebra) da faixa e pontuação para cada categorização
 */
enum CategorizacaoPerdaQuebra {
    INADMISSIVEL,
    CRITICO,
    VALOR_ELEVADO,
    ATENCAO,
    CONTROLE,
    SOBRA_DESCONTROLE
}

/**
 * TODO Incluir limite superior e inferior para cada nível
 */
enum NivelEficiencia {
    A, B, C, D, E
}

/**
 * TODO Incluir limite superior (perda e quebra) e inferior (perda e quebra) para cada faixa
 */
enum ClassificacaoPerdaQuebra {
    CONFORMIDADE,
    DESCONFORMIDADE
}

/**
 * TODO Fazer o link com o enum StatusItemAvaliado (1 Status tem uma Classificacao)
 */
enum ClassificacaoItemAvaliado {
    CONFORMIDADE,
    DESCONFORMIDADE,
    N_A
}

entity Questionario {
	nome String required
    descricao String
    ativo Boolean required
}

entity Loja {
    codigo String required
    nome String required
    nomeResponsavel String required
    prontuarioResponsavel Integer required
    latitude Double required
    longitude Double required
}

entity Avaliacao {
	iniciadaEm Instant required
    latitudeInicioAvaliacao Double required
    longitudeInicioAvaliacao Double required
    nomeResponsavelLoja String // Caso ele precise sobrescrever e também pra não permitir mudanças
    prontuarioResponsavelLoja Integer // Caso ele precise sobrescrever e também pra não permitir mudanças
    submetidoEm Instant
    latitudeSubmissaoAvaliacao Double
    longitudeSubmissaoAvaliacao Double
    observacaoSubmissaoEnviadaForaDaLoja String
    status StatusAvaliacao required
    criticidadePainel CriticidadePainel
    nivelEficienciaGeral NivelEficiencia
    nivelEficienciaProcedimento NivelEficiencia
    nivelEficienciaPessoa NivelEficiencia
    nivelEficienciaProcesso NivelEficiencia
    nivelEficienciaProduto NivelEficiencia
    canceladoEm Instant
    motivoCancelamento String
}

entity ItemAvaliacao {
	descricao String required
    anexoObrigatorio Boolean required
    pontosProcedimento Integer required
    pontosPessoa Integer required
    pontosProcesso Integer required
    pontosProduto Integer required
}

entity ItemAvaliado {
    respondidoEm Instant required
    ultimaAtualizacaoEm Instant
    status StatusItemAvaliado required
	observacoes String
    latitudeLocalResposta Double required
    longitudeLocalResposta Double required
    pontosProcedimento Integer required
    pontosPessoa Integer required
    pontosProcesso Integer required
    pontosProduto Integer required
    pontosObtidosProcedimento Integer required
    pontosObtidosPessoa Integer required
    pontosObtidosProcesso Integer required
    pontosObtidosProduto Integer required
}

entity ItemAvaliadoPerdaQuebraAcumulados {
	tipo TipoItemAvaliadoPerdaQuebra required
    respondidoEm Instant required
    ultimaAtualizacaoEm Instant
    percentual Double required
    financeiro BigDecimal required
    pontuacao Integer required
    latitudeLocalResposta Double required
    longitudeLocalResposta Double required
    classificacao ClassificacaoPerdaQuebra required
    categorizacao CategorizacaoPerdaQuebra required
}

entity GrupoItens {
	nome String required
}

enum TipoAnexoItem {
	IMAGEM
}

entity AnexoItem {
	tipo TipoAnexoItem required
    caminhoArquivo String required
}

enum TipoItemAuditado {
	TOP_5_PERDAS, ALTO_RISCO, TROCA_CANCELAMENTO_DVC
}

entity ItemAuditado {
    respondidoEm Instant required
    ultimaAtualizacaoEm Instant
	tipo TipoItemAuditado required
	codigoDepartamento Integer required
    codigoSap Integer required
    descricaoItem String required
    saldoSap Integer required
    saldoFisico Integer required
    motivoDivergencia String
}

entity ItemSolicitadoAjuste {
    respondidoEm Instant required
    ultimaAtualizacaoEm Instant
	codigoDepartamento Integer required
    codigoSap Integer required
    descricaoItem String required
    saldoSap Integer required
    saldoFisico Integer required
    motivoDivergencia String
    acaoCorretivaOuPreventiva String
    responsavel String
}

relationship OneToMany {
	Questionario{avaliacoesRealizadas} to Avaliacao{questionario(nome) required}
    ItemAvaliacao{itensAvaliados} to ItemAvaliado{itemAvaliacao(descricao) required}
    ItemAvaliado{anexos} to AnexoItem{itemAvaliado required}
    Avaliacao{itensAvaliados} to ItemAvaliado{avaliacao required}
    Avaliacao{itensPerdaEQuebraAcumulados(tipo)} to ItemAvaliadoPerdaQuebraAcumulados{avaliacao required}
    Avaliacao{itensAuditados(descricaoItem)} to ItemAuditado{avaliacao required}
    Avaliacao{itensComAjusteSolicitado(descricaoItem)} to ItemSolicitadoAjuste{avaliacao required}
}

relationship ManyToOne {
    Avaliacao{user(name) required} to User{avaliacoes}
}

relationship ManyToMany {
    GrupoItens{itens(descricao)} to ItemAvaliacao{grupo(nome)}
	Questionario{grupo(nome)} to GrupoItens{questionario(nome)}
    Loja{user(name)} to User{loja(nome)}
}

service Questionario, Avaliacao, AnexoItem, Loja, GrupoItens, ItemAvaliacao, ItemAvaliado with serviceClass
paginate Loja, Avaliacao with pagination
dto Avaliacao, Questionario, GrupoItens, ItemAvaliacao, ItemAvaliado, AnexoItem, Loja with mapstruct